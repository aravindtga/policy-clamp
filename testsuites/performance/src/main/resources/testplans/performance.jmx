<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Policy Clamp AutomationComposition Performance" enabled="true">
      <stringProp name="TestPlan.comments">Policy Clamp AutomationComposition Performance Tests</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="RUNTIME_HOST" elementType="Argument">
            <stringProp name="Argument.name">RUNTIME_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RUNTIME_PORT" elementType="Argument">
            <stringProp name="Argument.name">RUNTIME_PORT</stringProp>
            <stringProp name="Argument.value">30007</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOME_PATH" elementType="Argument">
            <stringProp name="Argument.name">HOME_PATH</stringProp>
            <stringProp name="Argument.value">./</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOGS_PATH" elementType="Argument">
            <stringProp name="Argument.name">LOGS_PATH</stringProp>
            <stringProp name="Argument.value">${HOME_PATH}/acm_perf/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="INSTANCES" elementType="Argument">
            <stringProp name="Argument.name">INSTANCES</stringProp>
            <stringProp name="Argument.value">${__P(INSTANCES,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERS" elementType="Argument">
            <stringProp name="Argument.name">USERS</stringProp>
            <stringProp name="Argument.value">${__P(USERS,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_BASE_URL" elementType="Argument">
            <stringProp name="Argument.value">http://policy-clamp-ac-pf-ppnt:6969</stringProp>
            <stringProp name="Argument.name">HTTP_BASE_URL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP_PATH" elementType="Argument">
            <stringProp name="Argument.name">HTTP_PATH</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">/onap/policyparticipant/health</stringProp>
          </elementProp>
          <elementProp name="HTTP_AUTHORIZATION" elementType="Argument">
            <stringProp name="Argument.name">HTTP_AUTHORIZATION</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">Basic cGFydGljaXBhbnRVc2VyOnpiIVh6dEczNA==</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">http://${RUNTIME_HOST}:${RUNTIME_PORT}/onap/policy/clamp/acm</stringProp>
            <stringProp name="Authorization.username">runtimeUser</stringProp>
            <stringProp name="Authorization.password">zb!XztG34</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.clearEachIteration">true</boolProp>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">260000</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register participants" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/participants</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49588">202</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Scope.variable"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">String users =  vars.get(&quot;USERS&quot;);
int n =  Integer.parseInt(users) + 2;
for (int i = 0; i &lt; n; i++) {
	props.put(&quot;baseCount&quot; + i, &quot;1&quot;);
     log.info(&quot;baseCount&quot; + i);	
}
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AutomationComposition Test Flow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${USERS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">50000</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Creation and Deploy" enabled="true">
          <stringProp name="LoopController.loops">${INSTANCES}</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;loopCondition&quot;, &quot;true&quot;);
vars.put(&quot;primeState&quot;, &quot;&quot;);
vars.put(&quot;deployState&quot;, &quot;&quot;);
String elementId = UUID.randomUUID().toString();
vars.put(&quot;elementId&quot;, elementId);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Commission AutomationComposition definition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_3&quot;,&#xd;
  &quot;name&quot;: &quot;${__RandomString(10,abcdefghilmnopqrtsvz)}&quot;,&#xd;
  &quot;version&quot;: &quot;1.0.${__threadNum}&quot;,&#xd;
  &quot;data_types&quot;: {&#xd;
    &quot;onap.datatypes.ToscaConceptIdentifier&quot;: {&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;name&quot;: {&#xd;
          &quot;name&quot;: &quot;name&quot;,&#xd;
          &quot;type&quot;: &quot;string&quot;,&#xd;
          &quot;required&quot;: true&#xd;
        },&#xd;
        &quot;version&quot;: {&#xd;
          &quot;name&quot;: &quot;version&quot;,&#xd;
          &quot;type&quot;: &quot;string&quot;,&#xd;
          &quot;required&quot;: true&#xd;
        }&#xd;
      },&#xd;
      &quot;name&quot;: &quot;onap.datatypes.ToscaConceptIdentifier&quot;,&#xd;
      &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;&#xd;
    },&#xd;
    &quot;org.onap.datatypes.policy.clamp.acm.httpAutomationCompositionElement.RestRequest&quot;: {&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;restRequestId&quot;: {&#xd;
          &quot;name&quot;: &quot;restRequestId&quot;,&#xd;
          &quot;type&quot;: &quot;onap.datatypes.ToscaConceptIdentifier&quot;,&#xd;
          &quot;description&quot;: &quot;The name and version of a REST request to be sent to a REST endpoint&quot;,&#xd;
          &quot;required&quot;: true&#xd;
        },&#xd;
        &quot;httpMethod&quot;: {&#xd;
          &quot;name&quot;: &quot;httpMethod&quot;,&#xd;
          &quot;type&quot;: &quot;string&quot;,&#xd;
          &quot;description&quot;: &quot;The REST method to use&quot;,&#xd;
          &quot;required&quot;: true,&#xd;
          &quot;constraints&quot;: [&#xd;
            {&#xd;
              &quot;valid_values&quot;: [&#xd;
                &quot;POST&quot;,&#xd;
                &quot;PUT&quot;,&#xd;
                &quot;GET&quot;,&#xd;
                &quot;DELETE&quot;&#xd;
              ]&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;path&quot;: {&#xd;
          &quot;name&quot;: &quot;path&quot;,&#xd;
          &quot;type&quot;: &quot;string&quot;,&#xd;
          &quot;description&quot;: &quot;The path of the REST request relative to the base URL&quot;,&#xd;
          &quot;required&quot;: true&#xd;
        },&#xd;
        &quot;body&quot;: {&#xd;
          &quot;name&quot;: &quot;body&quot;,&#xd;
          &quot;type&quot;: &quot;string&quot;,&#xd;
          &quot;description&quot;: &quot;The body of the REST request for PUT and POST requests&quot;,&#xd;
          &quot;required&quot;: false&#xd;
        },&#xd;
        &quot;expectedResponse&quot;: {&#xd;
          &quot;name&quot;: &quot;expectedResponse&quot;,&#xd;
          &quot;type&quot;: &quot;integer&quot;,&#xd;
          &quot;description&quot;: &quot;THe expected HTTP status code for the REST request&quot;,&#xd;
          &quot;required&quot;: true&#xd;
        }&#xd;
      },&#xd;
      &quot;name&quot;: &quot;org.onap.datatypes.policy.clamp.acm.httpAutomationCompositionElement.RestRequest&quot;,&#xd;
      &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
      &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;&#xd;
    },&#xd;
    &quot;org.onap.datatypes.policy.clamp.acm.httpAutomationCompositionElement.ConfigurationEntity&quot;: {&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;configurationEntityId&quot;: {&#xd;
          &quot;name&quot;: &quot;configurationEntityId&quot;,&#xd;
          &quot;type&quot;: &quot;onap.datatypes.ToscaConceptIdentifier&quot;,&#xd;
          &quot;description&quot;: &quot;The name and version of a Configuration Entity to be handled by the HTTP Automation Composition Element&quot;,&#xd;
          &quot;required&quot;: true&#xd;
        },&#xd;
        &quot;restSequence&quot;: {&#xd;
          &quot;name&quot;: &quot;restSequence&quot;,&#xd;
          &quot;type&quot;: &quot;list&quot;,&#xd;
          &quot;description&quot;: &quot;A sequence of REST commands to send to the REST endpoint&quot;,&#xd;
          &quot;required&quot;: false,&#xd;
          &quot;entry_schema&quot;: {&#xd;
            &quot;type&quot;: &quot;org.onap.datatypes.policy.clamp.acm.httpAutomationCompositionElement.RestRequest&quot;,&#xd;
            &quot;type_version&quot;: &quot;1.0.0&quot;&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;name&quot;: &quot;org.onap.datatypes.policy.clamp.acm.httpAutomationCompositionElement.ConfigurationEntity&quot;,&#xd;
      &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
      &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;&#xd;
    }&#xd;
  },&#xd;
  &quot;node_types&quot;: {&#xd;
    &quot;org.onap.policy.clamp.acm.Participant&quot;: {&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;provider&quot;: {&#xd;
          &quot;name&quot;: &quot;provider&quot;,&#xd;
          &quot;type&quot;: &quot;string&quot;,&#xd;
          &quot;required&quot;: false&#xd;
        }&#xd;
      },&#xd;
      &quot;name&quot;: &quot;org.onap.policy.clamp.acm.Participant&quot;,&#xd;
      &quot;version&quot;: &quot;1.0.1&quot;,&#xd;
      &quot;derived_from&quot;: &quot;tosca.nodetypes.Root&quot;&#xd;
    },&#xd;
    &quot;org.onap.policy.clamp.acm.AutomationCompositionElement&quot;: {&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;provider&quot;: {&#xd;
          &quot;name&quot;: &quot;provider&quot;,&#xd;
          &quot;type&quot;: &quot;string&quot;,&#xd;
          &quot;description&quot;: &quot;Specifies the organization that provides the automation composition element&quot;,&#xd;
          &quot;required&quot;: false,&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;common&quot;: &quot;true&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;startPhase&quot;: {&#xd;
          &quot;name&quot;: &quot;startPhase&quot;,&#xd;
          &quot;type&quot;: &quot;integer&quot;,&#xd;
          &quot;description&quot;: &quot;A value indicating the start phase in which this automation composition element will be started, the first start phase is zero. Automation Composition Elements are started in their start_phase order and stopped in reverse start phase order. Automation Composition Elements with the same start phase are started and stopped simultaneously&quot;,&#xd;
          &quot;required&quot;: false,&#xd;
          &quot;constraints&quot;: [&#xd;
            {&#xd;
              &quot;greater_or_equal&quot;: &quot;0&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;common&quot;: &quot;true&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;uninitializedToPassiveTimeout&quot;: {&#xd;
          &quot;name&quot;: &quot;uninitializedToPassiveTimeout&quot;,&#xd;
          &quot;type&quot;: &quot;integer&quot;,&#xd;
          &quot;description&quot;: &quot;The maximum time in seconds to wait for a state chage from uninitialized to passive&quot;,&#xd;
          &quot;default&quot;: 60,&#xd;
          &quot;required&quot;: false,&#xd;
          &quot;constraints&quot;: [&#xd;
            {&#xd;
              &quot;greater_or_equal&quot;: &quot;0&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;common&quot;: &quot;true&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;passiveToRunningTimeout&quot;: {&#xd;
          &quot;name&quot;: &quot;passiveToRunningTimeout&quot;,&#xd;
          &quot;type&quot;: &quot;integer&quot;,&#xd;
          &quot;description&quot;: &quot;The maximum time in seconds to wait for a state chage from passive to running&quot;,&#xd;
          &quot;default&quot;: 60,&#xd;
          &quot;required&quot;: false,&#xd;
          &quot;constraints&quot;: [&#xd;
            {&#xd;
              &quot;greater_or_equal&quot;: &quot;0&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;common&quot;: &quot;true&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;runningToPassiveTimeout&quot;: {&#xd;
          &quot;name&quot;: &quot;runningToPassiveTimeout&quot;,&#xd;
          &quot;type&quot;: &quot;integer&quot;,&#xd;
          &quot;description&quot;: &quot;The maximum time in seconds to wait for a state chage from running to passive&quot;,&#xd;
          &quot;default&quot;: 60,&#xd;
          &quot;required&quot;: false,&#xd;
          &quot;constraints&quot;: [&#xd;
            {&#xd;
              &quot;greater_or_equal&quot;: &quot;0&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;common&quot;: &quot;true&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;passiveToUninitializedTimeout&quot;: {&#xd;
          &quot;name&quot;: &quot;passiveToUninitializedTimeout&quot;,&#xd;
          &quot;type&quot;: &quot;integer&quot;,&#xd;
          &quot;description&quot;: &quot;The maximum time in seconds to wait for a state chage from passive to uninitialized&quot;,&#xd;
          &quot;default&quot;: 60,&#xd;
          &quot;required&quot;: false,&#xd;
          &quot;constraints&quot;: [&#xd;
            {&#xd;
              &quot;greater_or_equal&quot;: &quot;0&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;common&quot;: &quot;true&quot;&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;name&quot;: &quot;org.onap.policy.clamp.acm.AutomationCompositionElement&quot;,&#xd;
      &quot;version&quot;: &quot;1.0.1&quot;,&#xd;
      &quot;derived_from&quot;: &quot;tosca.nodetypes.Root&quot;&#xd;
    },&#xd;
    &quot;org.onap.policy.clamp.acm.AutomationComposition&quot;: {&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;provider&quot;: {&#xd;
          &quot;name&quot;: &quot;provider&quot;,&#xd;
          &quot;type&quot;: &quot;string&quot;,&#xd;
          &quot;description&quot;: &quot;Specifies the organization that provides the automation composition element&quot;,&#xd;
          &quot;required&quot;: false,&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;common&quot;: &quot;true&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;elements&quot;: {&#xd;
          &quot;name&quot;: &quot;elements&quot;,&#xd;
          &quot;type&quot;: &quot;list&quot;,&#xd;
          &quot;description&quot;: &quot;Specifies a list of automation composition element definitions that make up this automation composition definition&quot;,&#xd;
          &quot;required&quot;: true,&#xd;
          &quot;entry_schema&quot;: {&#xd;
            &quot;type&quot;: &quot;onap.datatypes.ToscaConceptIdentifier&quot;&#xd;
          },&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;common&quot;: &quot;true&quot;&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;name&quot;: &quot;org.onap.policy.clamp.acm.AutomationComposition&quot;,&#xd;
      &quot;version&quot;: &quot;1.0.1&quot;,&#xd;
      &quot;derived_from&quot;: &quot;tosca.nodetypes.Root&quot;&#xd;
    },&#xd;
    &quot;org.onap.policy.clamp.acm.HttpAutomationCompositionElement&quot;: {&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;baseUrl&quot;: {&#xd;
          &quot;name&quot;: &quot;baseUrl&quot;,&#xd;
          &quot;type&quot;: &quot;string&quot;,&#xd;
          &quot;description&quot;: &quot;The base URL to be prepended to each path, identifies the host for the REST endpoints.&quot;,&#xd;
          &quot;required&quot;: true&#xd;
        },&#xd;
        &quot;httpHeaders&quot;: {&#xd;
          &quot;name&quot;: &quot;httpHeaders&quot;,&#xd;
          &quot;type&quot;: &quot;map&quot;,&#xd;
          &quot;description&quot;: &quot;HTTP headers to send on REST requests&quot;,&#xd;
          &quot;required&quot;: false,&#xd;
          &quot;entry_schema&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;&#xd;
          }&#xd;
        },&#xd;
        &quot;configurationEntities&quot;: {&#xd;
          &quot;name&quot;: &quot;configurationEntities&quot;,&#xd;
          &quot;type&quot;: &quot;map&quot;,&#xd;
          &quot;description&quot;: &quot;The connfiguration entities the Automation Composition Element is managing and their associated REST requests&quot;,&#xd;
          &quot;required&quot;: true,&#xd;
          &quot;entry_schema&quot;: {&#xd;
            &quot;type&quot;: &quot;org.onap.datatypes.policy.clamp.acm.httpAutomationCompositionElement.ConfigurationEntity&quot;,&#xd;
            &quot;type_version&quot;: &quot;1.0.0&quot;&#xd;
          }&#xd;
        }&#xd;
      },&#xd;
      &quot;name&quot;: &quot;org.onap.policy.clamp.acm.HttpAutomationCompositionElement&quot;,&#xd;
      &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
      &quot;derived_from&quot;: &quot;org.onap.policy.clamp.acm.AutomationCompositionElement&quot;&#xd;
    }&#xd;
  },&#xd;
  &quot;topology_template&quot;: {&#xd;
    &quot;node_templates&quot;: {&#xd;
      &quot;org.onap.policy.clamp.acm.HttpParticipant&quot;: {&#xd;
        &quot;type&quot;: &quot;org.onap.policy.clamp.acm.Participant&quot;,&#xd;
        &quot;type_version&quot;: &quot;1.0.1&quot;,&#xd;
        &quot;properties&quot;: {&#xd;
          &quot;provider&quot;: &quot;ONAP&quot;&#xd;
        },&#xd;
        &quot;name&quot;: &quot;org.onap.policy.clamp.acm.HttpParticipant&quot;,&#xd;
        &quot;version&quot;: &quot;2.3.4&quot;,&#xd;
        &quot;description&quot;: &quot;Participant for Http requests&quot;&#xd;
      },&#xd;
      &quot;onap.policy.clamp.ac.element.Http_GenericAutomationCompositionElement&quot;: {&#xd;
        &quot;type&quot;: &quot;org.onap.policy.clamp.acm.HttpAutomationCompositionElement&quot;,&#xd;
        &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
        &quot;properties&quot;: {&#xd;
          &quot;provider&quot;: &quot;ONAP&quot;,&#xd;
          &quot;uninitializedToPassiveTimeout&quot;: 180,&#xd;
          &quot;startPhase&quot;: 0&#xd;
        },&#xd;
        &quot;name&quot;: &quot;onap.policy.clamp.ac.element.Http_GenericAutomationCompositionElement&quot;,&#xd;
        &quot;version&quot;: &quot;1.2.3&quot;,&#xd;
        &quot;description&quot;: &quot;Automation composition element for the http requests of AC Element Generic microservice&quot;&#xd;
      },&#xd;
      &quot;onap.policy.clamp.ac.element.AutomationCompositionDefinition&quot;: {&#xd;
        &quot;type&quot;: &quot;org.onap.policy.clamp.acm.AutomationComposition&quot;,&#xd;
        &quot;type_version&quot;: &quot;1.0.1&quot;,&#xd;
        &quot;properties&quot;: {&#xd;
          &quot;provider&quot;: &quot;ONAP&quot;,&#xd;
          &quot;elements&quot;: [&#xd;
            {&#xd;
              &quot;name&quot;: &quot;onap.policy.clamp.ac.element.Http_GenericAutomationCompositionElement&quot;,&#xd;
              &quot;version&quot;: &quot;1.2.3&quot;&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;name&quot;: &quot;onap.policy.clamp.ac.element.AutomationCompositionDefinition&quot;,&#xd;
        &quot;version&quot;: &quot;1.2.3&quot;,&#xd;
        &quot;description&quot;: &quot;Automation composition for Demp&quot;&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">compositionId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.compositionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">compositionId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String compositionId = vars.get(&quot;compositionId&quot;);

String baseCount = &quot;baseCount&quot; + ctx.getThreadNum();
String count = props.get(baseCount);
vars.put(&quot;composition&quot; + count + &quot;Id&quot;, compositionId);

log.info(&quot;Create Composition: &quot; + compositionId);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Prime AC definitions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;primeOrder&quot;: &quot;PRIME&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Scope.variable"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(&quot;${primeState}&quot; != &quot;PRIMED&quot;)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Priming" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Scope.variable"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">primeState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.state</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Scope.variable">compositionId</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Instantiate acm" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${__RandomString(10,abcdefghilmnopqrtsvz)}&quot;,&#xd;
  &quot;version&quot;: &quot;1.0.${__threadNum}&quot;,&#xd;
  &quot;compositionId&quot;: &quot;${compositionId}&quot;,&#xd;
  &quot;description&quot;: &quot;Demo automation composition HttpStater&quot;,&#xd;
  &quot;elements&quot;: {&#xd;
    &quot;${elementId}&quot;: {&#xd;
      &quot;id&quot;: &quot;${elementId}&quot;,&#xd;
      &quot;definition&quot;: {&#xd;
        &quot;name&quot;: &quot;onap.policy.clamp.ac.element.Http_GenericAutomationCompositionElement&quot;,&#xd;
        &quot;version&quot;: &quot;1.2.3&quot;&#xd;
      },&#xd;
      &quot;description&quot;: &quot;Starter Automation Composition Element for the Demo&quot;,&#xd;
      &quot;properties&quot;: {&#xd;
        &quot;uninitializedToPassiveTimeout&quot;: 180,&#xd;
        &quot;baseUrl&quot;: &quot;${HTTP_BASE_URL}&quot;,&#xd;
        &quot;httpHeaders&quot;: {&#xd;
          &quot;Content-Type&quot;: &quot;application/json&quot;,&#xd;
          &quot;Authorization&quot;: &quot;${HTTP_AUTHORIZATION}&quot;&#xd;
        },&#xd;
        &quot;configurationEntities&quot;: [&#xd;
          {&#xd;
            &quot;configurationEntityId&quot;: {&#xd;
              &quot;name&quot;: &quot;onap.policy.mockrestendpoint&quot;,&#xd;
              &quot;version&quot;: &quot;1.0.0&quot;&#xd;
            },&#xd;
            &quot;restSequence&quot;: [&#xd;
              {&#xd;
                &quot;restRequestId&quot;: {&#xd;
                  &quot;name&quot;: &quot;request1&quot;,&#xd;
                  &quot;version&quot;: &quot;1.0.1&quot;&#xd;
                },&#xd;
                &quot;httpMethod&quot;: &quot;GET&quot;,&#xd;
                &quot;path&quot;: &quot;${HTTP_PATH}&quot;,&#xd;
                &quot;body&quot;: &quot;&quot;,&#xd;
                &quot;expectedResponse&quot;: 200&#xd;
              }&#xd;
            ]&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}/instances</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">instanceId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">instanceId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String instanceId = vars.get(&quot;instanceId&quot;);

String baseCount = &quot;baseCount&quot; + ctx.getThreadNum();
String count = props.get(baseCount);

vars.put(&quot;instance&quot; + count + &quot;Id&quot;, instanceId);
log.info(&quot;Create Instance: &quot; + instanceId);

int icount = Integer.parseInt(count) + 1;
props.put(baseCount, (&quot;&quot; + icount));
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deploy AC instance" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;deployOrder&quot;: &quot;DEPLOY&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}/instances/${instanceId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">33</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(&quot;${deployState}&quot; !== &quot;DEPLOYED&quot;)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify acm state DEPLOYED" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}/instances/${instanceId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">deployState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.deployState</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Scope.variable">compositionId</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get participants" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/participants</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Scope.variable"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get compositions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Scope.variable"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Undeploy and Delete" enabled="true">
          <stringProp name="LoopController.loops">${INSTANCES}</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">vars.put(&quot;loopCondition&quot;, &quot;true&quot;);
vars.put(&quot;primeState&quot;, &quot;&quot;);
vars.put(&quot;deployState&quot;, &quot;&quot;);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undeploy AC instance" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;deployOrder&quot;: &quot;UNDEPLOY&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}/instances/${instanceId} </stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String baseCount = &quot;baseCount&quot; + ctx.getThreadNum();
String count = props.get(baseCount);
int icount = Integer.parseInt(count) - 1;
props.put(baseCount, (&quot;&quot; + icount));

count = props.get(baseCount);

String compositionId = vars.get(&quot;composition&quot; + count + &quot;Id&quot;);
vars.put(&quot;compositionId&quot;, compositionId);
log.info(&quot;compositionId: &quot; + compositionId);
String instanceId = vars.get(&quot;instance&quot; + count + &quot;Id&quot;);
vars.put(&quot;instanceId&quot;, instanceId);
log.info(&quot;instanceId: &quot; + instanceId);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">33</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(&quot;${deployState}&quot; !== &quot;UNDEPLOYED&quot;)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify acm state UNDEPLOYED" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}/instances/${instanceId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">deployState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.deployState</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Scope.variable">compositionId</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Uninstantiate AC instance" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}/instances/${instanceId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Metrics acm" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/prometheus</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">33</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    res = prev.getResponseDataAsString();

    assert res.contains(&quot;http_server_requests_seconds_sum&quot;)
    assert res.contains(&quot;http_server_requests_seconds_max&quot;)
    assert res.contains(&quot;spring_data_repository_invocations_seconds_count&quot;)
    assert res.contains(&quot;spring_data_repository_invocations_seconds_sum&quot;)
    assert res.contains(&quot;spring_data_repository_invocations_seconds_max&quot;)
    assert res.contains(&quot;jvm_threads_live_threads&quot;)


    assert res.contains(&quot;http_server_requests_seconds_count&quot;)

    assert res.contains(&quot;publisher_automation_composition_state_change_seconds_count&quot;)
    assert res.contains(&quot;publisher_participant_update_seconds_count&quot;)
    assert res.contains(&quot;publisher_automation_composition_deploy_seconds_count&quot;)

    assert res.contains(&quot;listener_participant_prime_ack_seconds_count&quot;)
    assert res.contains(&quot;listener_automation_composition_statechange_ack_seconds_count&quot;)
    assert res.contains(&quot;listener_participant_status_seconds_count&quot;)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(&quot;${loopCondition}&quot; === &quot;true&quot;)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify No Instances" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}/instances</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Scope.variable"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">automationCompositionList</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.automationCompositionList</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Scope.variable">compositionId</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">// Extracted JSON array
String jsonArray = vars.get(&quot;automationCompositionList&quot;);
//String jsonArray = &quot;[]&quot;;


log.info(&quot;instanceArray: &quot; + jsonArray);
// Check if the JSON array is empty
if (jsonArray.equals(&quot;[]&quot;)) {
    vars.put(&quot;loopCondition&quot;, &quot;false&quot;);
    log.info(&quot;condition false&quot;);
} else {
    vars.put(&quot;loopCondition&quot;, &quot;true&quot;);
    log.info(&quot;condition true&quot;);
}</stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deprime AC definition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;primeOrder&quot;: &quot;DEPRIME&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(&quot;${primeState}&quot; !== &quot;COMMISSIONED&quot;)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Deprimed" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Scope.variable"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">primeState</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.state</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Scope.variable">compositionId</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete AutomationComposition Definition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${RUNTIME_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${RUNTIME_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">/onap/policy/clamp/acm/v2/compositions/${compositionId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/tmp/testresults.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${LOGS_PATH}resultTree.log</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${LOGS_PATH}resultTable.log</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
